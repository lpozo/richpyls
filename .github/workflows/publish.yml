name: Publish to PyPI

on:
  push:
    branches: [ main ]
    paths:
      - 'src/richpyls/__init__.py'  # Only trigger on version changes
  workflow_dispatch:  # Allow manual triggering
    inputs:
      force_publish:
        description: 'Force publish even without version change'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: write  # For creating releases
  id-token: write  # Required for trusted publishing

jobs:
  # Run quality checks
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Check code formatting with ruff
      run: |
        uv run ruff format --check --diff .

    - name: Lint code with ruff
      run: |
        uv run ruff check .

    - name: Type check with mypy
      run: |
        uv run mypy src/richpyls/

    - name: Run tests with coverage
      run: |
        uv run python -m pytest --cov=richpyls --cov-report=xml --cov-report=term-missing

  # Get version information
  version-check:
    name: Version Check
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should-publish: ${{ steps.version.outputs.should-publish }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Need previous commit to compare

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Check version and publication status
      id: version
      run: |
        # Get current version using a safer method
        CURRENT_VERSION=$(python -c "
        import re
        with open('src/richpyls/__init__.py', 'r') as f:
            content = f.read()
        match = re.search(r'__version__ = \"([^\"]+)\"', content)
        if match:
            print(match.group(1))
        else:
            raise ValueError('Could not find version')
        ")
        echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"

        # Check if we should publish
        SHOULD_PUBLISH="false"

        # Force publish if requested via workflow_dispatch
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.force_publish }}" = "true" ]; then
          SHOULD_PUBLISH="true"
          echo "Forced publish requested"
        elif [ "${{ github.event_name }}" = "push" ]; then
          # For push events, check if version changed
          if git diff HEAD~1 HEAD --name-only | grep -q "src/richpyls/__init__.py"; then
            if git diff HEAD~1 HEAD src/richpyls/__init__.py | grep -q "__version__"; then
              SHOULD_PUBLISH="true"
              echo "Version changed, will publish"
            fi
          fi
        fi

        echo "should-publish=$SHOULD_PUBLISH" >> $GITHUB_OUTPUT

  # Build and publish to PyPI
  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [quality-checks, version-check]
    if: needs.version-check.outputs.should-publish == 'true'
    environment:
      name: pypi
      url: https://pypi.org/p/richpyls

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Install build dependencies
      run: |
        uv sync --group publish

    - name: Build package
      run: |
        uv run --group publish python -m build

    - name: Verify package
      run: |
        uv run --group publish python -m twine check dist/*
        ls -la dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        print: true

    - name: Create Git tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag "v${{ needs.version-check.outputs.version }}"
        git push origin "v${{ needs.version-check.outputs.version }}"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "v${{ needs.version-check.outputs.version }}"
        name: "Release v${{ needs.version-check.outputs.version }}"
        body: |
          ## Release v${{ needs.version-check.outputs.version }}

          ### ðŸŽ‰ What's New
          This release was automatically created from the main branch.

          ### ðŸ“¦ Installation
          ```sh
          pip install richpyls==${{ needs.version-check.outputs.version }}
          ```

          ### âœ… Quality Assurance
          This package has passed all quality checks:
          - âœ… Code formatting (Ruff)
          - âœ… Linting (Ruff)
          - âœ… Type checking (mypy)
          - âœ… Security scan (Bandit)
          - âœ… Test suite (99% coverage)

          ### ðŸ”— Links
          - [PyPI Package](https://pypi.org/project/richpyls/${{ needs.version-check.outputs.version }}/)
          - [Documentation](https://github.com/${{ github.repository }}#readme)
          - [Changelog](https://github.com/${{ github.repository }}/commits/v${{ needs.version-check.outputs.version }})

        draft: false
        prerelease: false
        files: dist/*
